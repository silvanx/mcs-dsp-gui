<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAHiAAAAEAIACoDwAAFgAAACgAAAAeAAAAQAAAAAEAIAAAAAAAAA8AAMMOAADDDgAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABNAAAArwAAAK8AAABwAAAAegAAACgAAAAFAAAAAwAA
        AAAAAAAbAAAAjgAAALMAAAC0AAAAuQAAAIwAAAATAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAmAAAAhgAAAM0AAADvAAAA/wAAAK0AAAA3AAAANgAA
        ADoAAAA8AAAAewAAAO0AAAD4AAAAxgAAAGEAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABQAAADwAAAB7AAAAlwAAAEkAAAAEAAAABgAA
        ABQAAAAEAAAABQAAAJcAAAChAAAAPQAAAAcAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADAAAAMgAAACIAAAADAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAwAAAALAAAAHQAAADQAAAADAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAhAAAAKwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACoAAAAiAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAUAAAA4AAAABwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAcAAAA4AAAABQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABYAAAAtAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAArAAAAGAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACYAAAAcAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAZAAAAKQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAzP8AAAAAAAAAAC4AAAASAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAOAAAAMQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAzP8AAPX/AAAAADEAAAAOAAAAAAAAAAAAAAAAAAAAAAAAAA8AAAAiAAAAIAAA
        AAwAAAAFAAAAFwAAACEAAAAVAAAAAQAAAAAAAAAKAAAANAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAzP8FAPf/AgAAADAAAAAPAAAAAAAAAAAAAAABAAAAJQAAADYAAAAhAAAAJAAA
        ACcAAAAlAAAALQAAACIAAAAyAAAALAAAAAIAAAAKAAAANAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAzP8AAMz/AAAAAAAAzP8EAP//CQAEBS0AAAATAP//AAAAAAAAAAAeAAAAMgAAAAMAAAAAAAAAAAAA
        AAAAAAACAAAAAAAAAAAAAAABAAAALwAAABwAAAAMAAAAMQAAAAAAzP8AAMz/AADM/wAAAAAAAAAAAAAA
        AAAAzP8CAMz/AADM/wAAzP8AAEVIFAAeJUIAJi8gAPj/AAAAAAcAAAA5AAAABwQEBAAAAAAEAAAABQAA
        AAAAAAAC////AAMDAwAAAAAAAAAACwAAADQAAAAYAAAAKwD3/wAAzP8CAMz/AgDM/wAAAAAAAAAAAAAA
        AAAAzP8MAMz/CADM/wEA/f8AAAAAXQAOEYgARVcxAP//AwAAACIAAAAkAAAAAAQEBA0HBweQBgYGsQEB
        AY0GBgahCAgIkQMDAx4AAAAAAAAAAAAGCDMAFxw2AAAAHgD//wAAzP8LAMz/CQDM/wYAzP8AAMv/AAAA
        AAAAzP8BAMz/BwDM/wwA/f8EAAICXwABAY4AJjA5AL/kFAASFjoAAAAKANj6AAUFBTMLCwvvCQoK/wMH
        COYHCAj5DAwM/wcHB2cA1f8AAP//AAAsNzAADRFQABIXDgDX/wsAzP8PAMz/CgDM/wMAzP8GAMv/AQDM
        /wAAzP8AAMz/AADM/wIA/f8GABQZVwADA5kACAo4AG2IEwBkfCsAxPYLANn/AQMAAAwHDA2MDxkc8RUe
        IOkQGhzwCAsMzAUDAjIA2P8DAOP/CQAwPCMAFhxSAL7rFQDN/xEAzP8HAMz/BgDM/wsAzP8GANP/AADM
        /wEAzP8AAMz/AADM/wAA7P8AAAECPwAFBpIAKTQ2AEJTHwDs/woAzP8WANL/FwB+nSEEZHw2FDpEoxki
        JNsYJSiyBygwNwB3lSYA0f8ZANT/FgBpgyoAQVE6ANb/CgDM/wcAzP8KAMz/CQDM/wMAzP8DAMz/CQDM
        /wwAzP8KAMz/CgDM/wgA4f8FAAcJVgABAYcAEhYYABQZMADv/wcAzP8LAND/EQB5mCcAdZItA11zMhFA
        TR4KJy4hAVNoHwB0kTAAz/8WANL/EQA6SDEAQVEoANv/DADM/wwAzP8JAMz/CQDM/wsAzP8KAMz/BgDM
        /wEAzP8BAMz/AwDM/wUA4P8HABAUUAAFB5oAlLgPACIrQABYbxgA2P8KAM7/CQCVuwsAT2IqAF91IwAP
        FwIASFkRAEtdLACYvRwAz/8VANL/EQAzQDoAUmcdAND/CQDM/wgAzP8HAMz/BADM/wEAzP8AAMz/AADM
        /wAAzP8AAMz/AADM/wAA4P8AAAAARgAAAIUAAAAhAAAArQAAALcACAokAO78BgJkfSkEVmgpABAUEgAA
        AAUAKDIOAH6fEQD//wEAzv8GAP//BgAqNTUATmEaANT/BwDM/wUAzP8DAMz/AgDM/wIAzP8DAMz/AgAA
        AAAAAAAAAMz/AQDM/wgA4P8GAAwPXAAICoUACAqUAAYI/wAICv8AGyJ0AHOJIAoTFsMpKCiNHSIjABQU
        FAAAAAAiDBYZhxI6RC4AAAAAAAAASQACAooAFhwfANX/BgDM/wgAzP8KAMz/CgDM/woAzP8JAMz/AwAA
        AAAAAAAAAMz/AADM/wQA3/8GABQZUgAKDZ8ACAnDAAcI/wAKDf8ADxKWACIuDAMCApQSEhJnFBQUUxMT
        E0ADAwM+DA0N2hAlKlcAOUcdAAAA1AAAAP0AAABrAP//AADM/wAAzP8AAMz/AADM/wAAzP8AAMz/AAAA
        AAAAAAAAAMz/AADM/wAA4v8AAAAASAADBIsAFRhSAAoN1QAEBewBAQF5GBgXUBsbG68fHx/jHBwc+xwc
        HPMdHR3FEhISmgsNDS0AGB5GAAgK9wABAf8AAADBAAAADQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAA//8BABYbUwASF30A//8DAAQFHQEAADUVFRWeICAg9SEhIf8hISH/HR0d/x0d
        Hf8hISH/ISEh/B4eHtAKCgquAAUG/wAJC/8ABQbZAAAAGADM/wAAzP8AAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAA//8BABYcKAACAzAAus4AAAMEABERERMeHh7VISEh/yEhIf8hISH/HR0d/h0d
        Hf4hISH/ISEh/yEhIf8XFxflAQAAtgADA80AExhtAKO1DADM/wQAzP8AAMz/AAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAA//8AAAAANAAAAEEAAAAAAAAAABERERweHh7dISEh/yEhIf8hISH/HR0d/x0d
        Hf8hISH/ISEh/yEhIf8eHh7gDg4OJwAAABEADREBAOH/BADM/woAzP8KAMz/AgAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAFgAAACEAAAAAAAAAABERERoeHh7bISEh/yEhIf8hISH/HR0d/x0d
        Hf8hISH/ISEh/yEhIf8fHx/tFRUVLgAAAAAADA8AANP/AADP/wAAzP8CAMz/AQAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAFgAAACMAAAAAAAAAABAQEBgeHh7ZISEh/yEhIf8hISH/HR0d/h0d
        Hf0hISH/ISEh/yEhIf8fHx/xFRUVNgAAAAAAAAAAAAAAAADM/wAAzP8AAMz/AAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAFwAAACQAAAAAAAAAABERERIeHh7TIiIi/yIiIv8iIiL/Hh4e/hwc
        HP4hISH/IiIi/yEhIf8fHx/xFRUVNQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAHgAAADkAAAAaAAAAIwMDAzsVFRXZFxcX/xUVFf8TExP/Dw8P/wwM
        DP8PDw//FhYW/xwcHP8dHR3uFRUVLgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAACAAAALwAAAHAAAACbAAAAxQAAAOMBAQH8AQEB/wAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA/wMDA/8GBgb6AgICowAAAGIAAAAzAAAAEQAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAARAAAAKwAAAFEAAACAAAAArwAAANUAAADqAAAA+QAA
        APgAAADsAAAA3gAAAM8AAAC/AAAAsQAAAJoAAAB1AAAAOwAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAD8AgP8/AAD/P4AB/z8P4P8/P/z/Pj/8fz5//n8+f/5/Pn/+fz54An84YAB/OGOwfxxEuE8ECAxHAAg
        MATAAAAI8AAAAAAAAAAAAAAc8AAABIAGIATAAAP88AAB/OAAAfzjAAD88wAAPPMADzzzAA/88wAP/PAA
        D/zgAAD8+AAA/A==
</value>
  </data>
</root>